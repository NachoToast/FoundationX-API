{
    "openapi": "3.0.3",
    "info": {
        "title": "FoundationX API",
        "description": "Official web API for the FoundationX server network.",
        "contact": {
            "name": "NachoToast",
            "url": "https://github.com/NachoToast",
            "email": "32235595+NachoToast@users.noreply.github.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/NachoToast/FoundationX-API/blob/main/LICENSE"
        },
        "version": "2.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:{port}",
            "description": "Development Server",
            "variables": {
                "port": {
                    "default": "5000"
                }
            }
        },
        {
            "url": "https://api.foundationxservers.com",
            "description": "Production Server"
        }
    ],
    "paths": {
        "/": {
            "get": {
                "tags": ["Miscellaneous"],
                "operationId": "getRoot",
                "responses": {
                    "200": {
                        "description": "Basic response message.",
                        "content": {
                            "text/html": {
                                "example": "You found the FoundationX API!"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError400"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    }
                }
            }
        },
        "/ip": {
            "get": {
                "tags": ["Miscellaneous"],
                "operationId": "getIp",
                "description": "IP address information endpoint, used for debugging proxies.",
                "externalDocs": {
                    "url": "https://express-rate-limit.mintlify.app/guides/troubleshooting-proxy-issues",
                    "description": "Troubleshooting proxy issues with express-rate-limit."
                },
                "responses": {
                    "200": {
                        "description": "IP address of request, may be `::` if viewing from the same network.",
                        "content": {
                            "text/html": {
                                "example": "123.123.123.123"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError400"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    }
                }
            }
        },
        "/spec": {
            "get": {
                "tags": ["Miscellaneous"],
                "responses": {
                    "200": {
                        "description": "OpenAPI specification for the FoundationX API.",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/api-docs": {
            "get": {
                "tags": ["Miscellaneous"],
                "responses": {
                    "200": {
                        "description": "This document.",
                        "content": {
                            "text/html": {}
                        }
                    }
                }
            }
        },
        "/static": {
            "get": {
                "tags": ["Miscellaneous"],
                "responses": {
                    "200": {
                        "description": "List of static routes.",
                        "content": {
                            "text/html": {}
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "tags": ["Auth"],
                "operationId": "postLogin",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "code": {
                                        "type": "string"
                                    },
                                    "redirectUri": {
                                        "type": "string",
                                        "example": "http://localhost:5000/static/discordOAuth"
                                    }
                                },
                                "required": ["code", "redirectUri"],
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginOrSignupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError400"
                    },
                    "403": {
                        "$ref": "#/components/responses/ForbiddenError403"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    },
                    "502": {
                        "$ref": "#/components/responses/SecondaryRequestError502"
                    }
                }
            }
        },
        "/refresh": {
            "post": {
                "tags": ["Auth"],
                "security": [{ "siteToken": [] }],
                "operationId": "postRefresh",
                "responses": {
                    "200": {
                        "description": "Successful refresh response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginOrSignupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError400"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthError401"
                    },
                    "403": {
                        "$ref": "#/components/responses/ForbiddenError403"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError404"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    },
                    "502": {
                        "$ref": "#/components/responses/SecondaryRequestError502"
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "tags": ["Auth"],
                "security": [{ "siteToken": [] }],
                "operationId": "postLogout",
                "responses": {
                    "200": {
                        "description": "Successfully logged out."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError400"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthError401"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    },
                    "502": {
                        "$ref": "#/components/responses/SecondaryRequestError502"
                    }
                }
            }
        },
        "/server-stats/{id}": {
            "parameters": [
                {
                    "$ref": "#/components/parameters/serverId"
                }
            ],
            "get": {
                "tags": ["Server Stats"],
                "operationId": "getServerStats",
                "responses": {
                    "200": {
                        "description": "Server stats object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutServerStats"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Edge-case where the server is tracked by this API, but it's stats have not yet been populated."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError400"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError404"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    }
                }
            },
            "post": {
                "tags": ["Server Stats"],
                "operationId": "updateServerStats",
                "security": [
                    {
                        "statsAuthToken": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InServerStats"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Updated server stats object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutServerStats"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError400"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError404"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthError401"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    }
                }
            }
        },
        "/server-stats": {
            "get": {
                "tags": ["Server Stats"],
                "operationId": "getAllServerStats",
                "description": "Fetches a list of all server stats as well as all server IDs tracked by the API.",
                "responses": {
                    "200": {
                        "description": "List of server IDs and their stats.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "serverId": {
                                                "type": "string"
                                            },
                                            "stats": {
                                                "anyOf": [
                                                    {
                                                        "$ref": "#/components/schemas/Null"
                                                    },
                                                    {
                                                        "$ref": "#/components/schemas/OutServerStats"
                                                    }
                                                ]
                                            }
                                        },
                                        "required": ["serverId", "stats"],
                                        "additionalProperties": false
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError400"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "LoginOrSignupResponse": {
                "type": "object",
                "externalDocs": {
                    "url": "https://github.com/NachoToast/FoundationX-API/blob/main/src/types/Auth/LoginOrSignupResponse.ts",
                    "description": "src/types/Auth/LoginOrSignupResponse.ts"
                },
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "discordAuth": {
                        "type": "object",
                        "externalDocs": {
                            "url": "https://discord.com/developers/docs/topics/oauth2#authorization-code-grant-access-token-response",
                            "description": "Discord OAuth2 Docs"
                        },
                        "properties": {
                            "access_token": {
                                "type": "string"
                            },
                            "token_type": {
                                "type": "string",
                                "description": "The type of token provided (Bearer)."
                            },
                            "expires_in": {
                                "type": "integer",
                                "description": "The number of seconds until the token expires."
                            },
                            "refresh_token": {
                                "type": "string"
                            },
                            "scope": {
                                "type": "string",
                                "description": "The scopes that were granted to the application by the user."
                            }
                        },
                        "required": [
                            "access_token",
                            "token_type",
                            "expires_in",
                            "refresh_token",
                            "scope"
                        ],
                        "additionalProperties": false
                    },
                    "siteAuth": {
                        "type": "string"
                    }
                }
            },
            "SiteTokenPayload": {
                "type": "object",
                "externalDocs": {
                    "url": "https://github.com/NachoToast/FoundationX-API/blob/main/src/types/Auth/SiteTokenPayload.ts",
                    "description": "src/types/Auth/SiteTokenPayload.ts"
                },
                "properties": {
                    "steamId64": {
                        "type": "string"
                    },
                    "discordId": {
                        "type": "string"
                    },
                    "accessToken": {
                        "type": "string"
                    },
                    "refreshToken": {
                        "type": "string"
                    }
                },
                "required": [
                    "steamId64",
                    "discordId",
                    "accessToken",
                    "refreshToken"
                ],
                "additionalProperties": false
            },
            "User": {
                "type": "object",
                "externalDocs": {
                    "url": "https://github.com/NachoToast/FoundationX-API/blob/main/src/types/User/User.ts",
                    "description": "src/types/User/User.ts"
                },
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "discord": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            },
                            "avatar": {
                                "type": "string",
                                "nullable": true
                            }
                        },
                        "required": ["id", "username", "avatar"],
                        "additionalProperties": false
                    },
                    "economy": {
                        "type": "object",
                        "properties": {
                            "balance": {
                                "type": "integer"
                            },
                            "lifetimeBalance": {
                                "type": "integer"
                            },
                            "lifetimePurchaseCount": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "balance",
                            "lifetimeBalance",
                            "lifetimePurchaseCount"
                        ],
                        "additionalProperties": false
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "latestIp": {
                                "type": "string"
                            },
                            "firstSeenAt": {
                                "type": "integer"
                            },
                            "lastSeenAt": {
                                "type": "integer"
                            }
                        },
                        "required": ["firstSeenAt", "lastSeenAt"],
                        "additionalProperties": false
                    }
                },
                "required": ["_id", "username", "discord", "economy", "meta"],
                "additionalProperties": false
            },
            "SiteErrorObject": {
                "type": "object",
                "externalDocs": {
                    "url": "https://github.com/NachoToast/FoundationX-API/blob/main/src/types/Express/SiteErrorObject.ts",
                    "description": "src/types/Express/SiteErrorObject.ts"
                },
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": ["title", "description"]
            },
            "OutServerStats": {
                "type": "object",
                "externalDocs": {
                    "url": "https://github.com/NachoToast/FoundationX-Discord/blob/main/src/types/ServerStats/ServerStats.ts",
                    "description": "src/types/ServerStats/ServerStats.ts"
                },
                "properties": {
                    "reportedAt": {
                        "type": "integer"
                    },
                    "playerCount": {
                        "type": "integer"
                    },
                    "playerCap": {
                        "type": "integer"
                    }
                },
                "required": ["reportedAt", "playerCount", "playerCap"],
                "additionalProperties": false
            },
            "InServerStats": {
                "type": "object",
                "externalDocs": {
                    "url": "https://github.com/NachoToast/FoundationX-Discord/blob/main/src/types/ServerStats/ServerStats.ts",
                    "description": "src/types/ServerStats/ServerStats.ts"
                },
                "properties": {
                    "playerCount": {
                        "type": "integer"
                    },
                    "playerCap": {
                        "type": "integer"
                    }
                },
                "required": ["playerCount", "playerCap"],
                "additionalProperties": false
            },
            "Null": {
                "title": "null",
                "description": "Stand-in for `null` type.",
                "enum": [null]
            }
        },
        "responses": {
            "BadRequestError400": {
                "description": "Error thrown when a request is malformed or otherwise an invalid shape. This can also be thrown when a request's origin header is present and not in the allowed origins whitelist (CORS error).",
                "content": {
                    "application/json": {
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "object",
                                    "externalDocs": {
                                        "url": "https://github.com/NachoToast/FoundationX-API/blob/main/src/middleware/validatorErrorHandler.ts",
                                        "description": "src/middleware/validatorErrorHandler.ts"
                                    },
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/SiteErrorObject"
                                        }
                                    ],
                                    "properties": {
                                        "additionalData": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "path": {
                                                        "type": "string",
                                                        "example": "/refresh"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Authorization header with scheme 'Bearer' required"
                                                    },
                                                    "error_code": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": ["path", "message"],
                                                "additionalProperties": false
                                            }
                                        }
                                    }
                                },
                                {
                                    "type": "object",
                                    "externalDocs": {
                                        "url": "https://github.com/NachoToast/FoundationX-API/blob/main/src/classes/CorsError.ts",
                                        "description": "src/classes/CorsError.ts"
                                    },
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/SiteErrorObject"
                                        }
                                    ],
                                    "properties": {
                                        "additionalData": {
                                            "type": "string",
                                            "description": "The origin header value that resulted in the error."
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "AuthError401": {
                "description": "Error thrown when a request is made with insufficient or malformed credentials, such as having an invalid auth token.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "externalDocs": {
                                "url": "https://github.com/NachoToast/FoundationX-API/blob/main/src/classes/AuthError.ts",
                                "description": "src/classes/AuthError.ts"
                            },
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SiteErrorObject"
                                }
                            ]
                        }
                    }
                }
            },
            "ForbiddenError403": {
                "description": "Error thrown when a request cannot be completed due to an invalid state or other factor unrelated to the direct client input.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "externalDocs": {
                                "url": "https://github.com/NachoToast/FoundationX-API/blob/main/src/classes/NotFoundError.ts",
                                "description": "src/classes/NotFoundError.ts"
                            },
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SiteErrorObject"
                                }
                            ]
                        }
                    }
                }
            },
            "NotFoundError404": {
                "description": "Error thrown when a requested item could not be found.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "externalDocs": {
                                "url": "https://github.com/NachoToast/FoundationX-API/blob/main/src/classes/NotFoundError.ts",
                                "description": "src/classes/NotFoundError.ts"
                            },
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SiteErrorObject"
                                }
                            ]
                        }
                    }
                }
            },
            "RateLimited429": {
                "description": "Too many requests, rate limited.",
                "headers": {
                    "RateLimit": {
                        "required": true,
                        "description": "Information about the rate limit that was exceeded.",
                        "schema": {
                            "type": "string",
                            "externalDocs": {
                                "url": "https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-ratelimit-headers-07#name-ratelimit",
                                "description": "IETF rate limit header specification (draft 7)"
                            }
                        }
                    }
                }
            },
            "SecondaryRequestError502": {
                "description": "Error thrown when an API call made by the server to another server fails.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "externalDocs": {
                                "url": "https://github.com/FoundationX-API/blob/main/src/classes/SecondaryRequestError.ts",
                                "description": "src/classes/SecondaryRequestError.ts"
                            },
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SiteErrorObject"
                                }
                            ],
                            "properties": {
                                "additionalData": {
                                    "type": "string",
                                    "nullable": true
                                }
                            },
                            "required": ["additionalData"]
                        }
                    }
                }
            }
        },
        "parameters": {
            "serverId": {
                "in": "path",
                "name": "id",
                "schema": {
                    "type": "string",
                    "description": "Secret Lab server ID.",
                    "example": "123456"
                },
                "required": true
            }
        },
        "securitySchemes": {
            "statsAuthToken": {
                "type": "apiKey",
                "description": "Authorization token for updating server stats.",
                "name": "Authorization",
                "in": "header"
            },
            "siteToken": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "JWT signed by the server, contains Discord access token, refresh token, Discord user ID, and SteamID64."
            }
        }
    },
    "tags": [
        {
            "name": "Miscellaneous",
            "description": "Miscellaneous functionality."
        },
        {
            "name": "Server Stats",
            "description": "Fetching and updating reported SL server stats."
        },
        {
            "name": "Auth",
            "description": "Logging in, logging out, and refreshing."
        }
    ]
}
